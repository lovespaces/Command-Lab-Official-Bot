import io
import uuid
from datetime import datetime
from typing import Literal

import discord
from discord import app_commands
from discord.ext import commands
from pydantic import BaseModel

from utils.util import create_codeblock


class ManifestHeader(BaseModel):
    name: str
    description: str
    version: list[int]
    min_engine_version: list[int]
    uuid: str


ManifestModuleTypes = Literal["data", "resources", "client_data", "script"]


class ManifestModule(BaseModel):
    description: str
    type: ManifestModuleTypes
    uuid: str
    version: list[int]


class Manifest(BaseModel):
    format_version: int
    header: ManifestHeader
    modules: list[ManifestModule]


class ManifestCreationView(discord.ui.Modal):
    def __init__(self, type: ManifestModuleTypes):
        super().__init__(title="manifest.jsonの作成", timeout=None)

        self.name = discord.ui.TextInput(label="名前", placeholder="名前がありません")

        self.description = discord.ui.TextInput(
            label="説明", style=discord.TextStyle.long, placeholder="不明なパックの説明"
        )

        self.version = discord.ui.TextInput(
            label="バージョン",
            style=discord.TextStyle.short,
            placeholder="0.0.1",
            default="0.0.1",
        )

        self.min_engine_version = discord.ui.TextInput(
            label="最小エンジンバージョン",
            style=discord.TextStyle.short,
            placeholder="1.13.0",
            default="1.13.0",
        )

        self.type = type

        self.add_item(self.name)
        self.add_item(self.description)
        self.add_item(self.version)
        self.add_item(self.min_engine_version)

    async def on_submit(self, interaction: discord.Interaction):
        ver = self.version.value.split(".")
        min_engine_version = self.min_engine_version.value.split(".")
        pack_uuid = str(uuid.uuid4())
        module_uuid = str(uuid.uuid4())

        manifest = Manifest(
            header=ManifestHeader(
                name=self.name.value,
                description=self.description.value,
                version=ver,
                uuid=pack_uuid,
                min_engine_version=min_engine_version,
            ),
            modules=[
                ManifestModule(
                    description=self.description.value,
                    type=self.type,
                    uuid=module_uuid,
                    version=ver,
                )
            ],
            format_version=2,
        )

        data = manifest.model_dump_json(indent=4)
        file = discord.File(io.StringIO(data), filename="manifest.json")

        embed = discord.Embed(
            title="manifest.json Generator",
            color=0x89C4FF,
            description=f"**{self.name.value}**\n{self.description.value}",
            timestamp=datetime.now(),
        )

        embed.set_author(
            name=interaction.user.display_name, icon_url=interaction.user.avatar.url
        )
        embed.add_field(
            name="Pack UUID", value=create_codeblock(pack_uuid), inline=False
        )
        embed.add_field(
            name="Module UUID", value=create_codeblock(module_uuid), inline=False
        )
        embed.set_footer(text="Generated by コマ研Bot")

        await interaction.response.send_message(file=file, embed=embed, ephemeral=True)


@app_commands.guild_only()
class CManifest(commands.Cog):
    def __init__(self, bot: commands.Bot):
        super().__init__()
        self.bot = bot

    @app_commands.command(name="cmanifest", description="manifest.jsonの生成")
    @app_commands.guild_only()
    async def cmanifest(
        self, interaction: discord.Interaction, type: ManifestModuleTypes
    ):
        await interaction.response.send_modal(ManifestCreationView(type))


async def setup(bot: commands.Bot):
    await bot.add_cog(CManifest(bot=bot))
